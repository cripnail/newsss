import 'package:intl/intl.dart'; // For date parsing/formatting if needed
import '../../domain/entities/comment.dart';
import '../../domain/entities/news_article.dart';
import 'comment_db_model.dart';
import 'news_api_model.dart';
import 'news_db_model.dart';

// --- API to DB --- 

// Helper to safely parse DateTime from String?
DateTime? _parseDateTimeSafe(String? dateString) {
  if (dateString == null) return null;
  try {
    return DateTime.tryParse(dateString);
  } catch (_) {
    return null; // Return null if parsing fails
  }
}

NewsDbModel articleApiModelToDbModel(ArticleApiModel apiModel) {
  // We need a non-null URL for the unique index in DB.
  // If URL is null from API, we might skip this article or use a placeholder.
  // For now, let's skip articles without a URL.
  if (apiModel.url == null) {
    // This case should ideally be filtered out before calling the mapper,
    // but as a safeguard:
    throw ArgumentError('Cannot map ArticleApiModel to NewsDbModel: URL is null');
  }
  return NewsDbModel()
    ..url = apiModel.url // Used as the unique ID in the DB
    ..sourceName = apiModel.source?.name
    ..author = apiModel.author
    ..title = apiModel.title ?? '' // Ensure non-null for potential display
    ..description = apiModel.description ?? ''
    ..urlToImage = apiModel.urlToImage
    ..publishedAt = _parseDateTimeSafe(apiModel.publishedAt)
    ..content = apiModel.content ?? ''; // NewsAPI content might be partial or null
}

List<NewsDbModel> articleApiModelListToDbModelList(List<ArticleApiModel> apiModels) {
  return apiModels
      .where((apiModel) => apiModel.url != null && apiModel.title != null) // Filter out articles without URL or title
      .map(articleApiModelToDbModel)
      .toList();
}

// --- DB to Domain --- 

NewsArticle newsDbModelToEntity(NewsDbModel dbModel, List<Comment> comments) {
  // The DB model uses Isar's auto-increment ID, but the entity needs a stable ID.
  // We use the unique URL as the entity's ID.
  if (dbModel.url == null) {
     throw ArgumentError('Cannot map NewsDbModel to NewsArticle: URL is null');
  }
  return NewsArticle(
    id: dbModel.url!, // Use URL as the stable ID for the entity
    sourceName: dbModel.sourceName,
    author: dbModel.author,
    title: dbModel.title ?? '',
    description: dbModel.description ?? '',
    url: dbModel.url!,
    urlToImage: dbModel.urlToImage,
    publishedAt: dbModel.publishedAt,
    content: dbModel.content ?? '', // Provide default empty string if null
    comments: comments, // Attach comments fetched separately
  );
}

Comment commentDbModelToEntity(CommentDbModel dbModel) {
  // We need a unique ID for the Comment entity.
  // Since Isar provides `id`, we can convert it to String.
  // Or, if we prefer absolute uniqueness across devices/sessions,
  // we should generate a UUID when creating the comment.
  // Let's use Isar ID for simplicity here.
  if (dbModel.articleUrl == null || dbModel.userName == null || dbModel.text == null || dbModel.createdAt == null) {
     throw ArgumentError('Cannot map CommentDbModel to Comment: Required field is null');
  }
  return Comment(
    id: dbModel.id.toString(), // Use Isar ID as entity ID
    articleId: dbModel.articleUrl!, // articleUrl links to NewsArticle.id (which is the URL)
    userName: dbModel.userName!, 
    text: dbModel.text!,
    createdAt: dbModel.createdAt!,
  );
}

// --- Domain to DB (for creating Comments) ---

CommentDbModel createCommentDbModel(String articleUrl, String userName, String text) {
  // ID is generated by Isar, articleUrl links it.
  return CommentDbModel()
    ..articleUrl = articleUrl
    ..userName = userName
    ..text = text
    ..createdAt = DateTime.now(); // Set creation time
} 